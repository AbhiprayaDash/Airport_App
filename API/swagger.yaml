openapi: 3.0.0
info:
  title: Airport Fuel Inventory API
  version: 0.1.0
servers:
  - url: http://localhost:9000
paths:
  /:
    get:
      tags:
       - Home Page
      summary: get home page
      description: Home page
      responses: 
        '200':
          description: Successful response
  /users/signin:
    post:
      tags:
       - User API
      summary: post login data.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email Id of user
                  required: true
                password:
                  type: string
                  description: Password of user
                  required: true
      description: Post Login Data email and password
      responses:
        '200':    # status code
          description: sucessfully logged in
        '400':
          description: Email or password is Incorrect.
        '404':
          description: A user with the specified ID was not found.
        default:
          description: Unexpected error

  /users/signup:
    post:
      tags:
       - User API
      summary: post Signup data.
      description: Post Signup Data username,email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of user
                  required: true
                email:
                  type: string
                  description: Email Id of user
                  required: true
                password:
                  type: string
                  description: Password of user
                  required: true
      responses:
        '200':    # status code
          description: sucessfully logged in
        '400':
          description: Email or password is Invalid.
        '404':
          description: A user with the specified ID was not found.
        default:
          description: Unexpected error
  /airports:
    post:
      tags:
       - Airport API
      summary: post Airport data data.
      description: Post Airport data like name,fuelcapacity and fuelcavailable
      parameters:
       - name: Name
         in: query
         description: Name of airport
         required: true
         type: string
       - name: Fuel Capacity
         in: query
         description: Fuel Capacity of Airport
         required: true
         type: number
       - name: Fuel Available
         in: query
         description: Fuel Available of Airport
         required: true
         type: number
      responses:
        '200':    # status code
          description: sucessfully added airport details
    get:
      tags:
       - Airport API
      summary: get Airport data data.
      description: get Airport data like name,fuelcapacity and fuelcavailable
      responses:
        '200':    # status code
          description: A JSON array of Airport data
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string 
  /aircrafts:
    post:
      tags:
       - Aircraft API
      summary: post Aircraft data.
      description: Post Aircraft Data like aircraft_no and Airline
      parameters:
       - name: Aircraft Number
         in: query
         description: Aircraft number
         required: true
         type: number
       - name: Airline
         in: query
         description: Name of Airline
         required: true
         type: string
      responses:
        '200':    # status code
          description: sucessfully added aircraft details
    get:
      tags:
       - Aircraft API
      summary: get Aircraft data.
      description: get Aircraft Data like aircraft_no and Airline
      responses:
        '200':    # status code
          description: A JSON array of Aircraft data
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string
  /transactions:
    post:
      tags:
       - Transaction API
      summary: post Transaction data.
      description: Post Aircraft Data like Transaction type,airport,aircraft,quantity
      parameters:
       - name: Type
         in: query
         description: Type of Transaction
         required: true
         type: string
       - name: Airport name
         in: query
         description: Airport name
         required: true
         type: string
       - name: Aircraft number
         in: query
         description: Aircraft number
         required: true
         type: number
       - name: Quantity
         in: query
         description: Quantity
         required: true
         type: number
      responses:
        '200':    # status code
          description: sucessfully added Transaction details
    get:
      tags:
       - Transaction API
      summary: get Transaction data.
      description: Post Aircraft Data like Transaction type,airport,aircraft,quantity
      responses:
        '200':    # status code
          description: A JSON array of Transaction data
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: string         
  /transactions/filter/{type}/{aircraftno}/{category}:
    get:
      tags:
       - Filter API
      summary: get type of transaction
      description: Get type of transaction on the basis of what we want to filter
      parameters: 
       - name: type
         in: path
         description: Type of transaction
         required: true
         type: string
       - name: category
         in: path
         description: Category of transaction
         required: true
         type: string
      responses:
        '200':  #status code
          description: Successfully posted transaction filter
  /transactions/filter/{aircraftno}/{category}:
    get:
      tags:
       - Filter API
      summary: get AircraftNo of transaction
      description: Get aircraft no of transaction on the basis of what we want to filter
      parameters: 
       - name: aircraftno
         in: path
         description: AircraftNO of transaction
         required: false
         type: Number
       - name: category
         in: path
         description: Category of transaction
         required: true
         type: string
      responses:
        '200':  #status code
          description: Successfully posted transaction filter
  /airports/filter/{AiportName}/{category}:
    get:
      tags:
       - Filter API
      summary: get Airportname of transaction
      description: Get Airportname on the basis of what we want to filter
      parameters: 
       - name: AiportName
         in: path
         description: AirportName of transaction
         required: false
         type: string
       - name: category
         in: path
         description: Category of Airport Filter
         required: true
         type: string
      responses:
        '200':  #status code
          description: Successfully posted transaction filter
  /aircrafts/filter/{Airline}/{category}:
    get:
      tags:
       - Filter API
      summary: get Airline of transaction
      description: Get Airliney on the basis of what we want to filter
      parameters: 
       - name: Airline
         in: path
         description: Airline
         required: false
         type: string
       - name: category
         in: path
         description: Category of Aircraft Filter
         required: true
         type: string
      responses:
        '200':  #status code
          description: Successfully posted transaction filter
components:
  schemas:
    users:
        type: object
        description: "User Model"
        properties:
              name:
                type: string
                description: "Name of user"
                example: "Abhipraya"
              email:
                type: string
                description: "Email Id of User"
                example: "dashabhipraya@gmail.com"
              password:
                type: string
                description: "Password"
                example: "Abhipraya@12"
    transactions:
              type: object
              description: "Transaction Model"
              properties:
                  Duration:
                      type: object,
                      description: "Time of transaction"
                  Type:
                      type: string
                      description: "type of transaction"
                  airport:
                      type: object
                      description: "Airport"
                  aircraft:
                      type: object
                      description: "Aircraft"
                  quantity:
                      type: Number
                      description: "Quantity of transaction"
    airports:
            type: object
            description: "Airport Model"
            properties:
                name:
                    type: string
                    description: "name of Airport"
                fuelcapacity:
                    type: Number
                    description: "Fuel capacity of Airport"
                fuelavailable:
                    type: Number
                    description: "Fuel available in Airport"
    aircrafts:
            type: object
            description: "Aircraft Model"
            properties:
                aircraft_no:
                    type: Number
                    description: "Aircraft Number"
                airline:
                    type: string
                    description: "Airline name"
    aircraftlists:
            type: object
            description: "AircraftList Model"
            properties:
                aircraftlist:
                    type: Array
                    description: "List of Aircrafts Available"
    airportlists:
            type: object
            description: "AirportList Model"
            properties:
                airportList:
                    type: Array
                    description: "List of Airports Available"
  # /airport/sort/name:
  #   get:
  #     tags:
  #      - Sort Airport API
  #     summary: get airport data sorted in order of their name
  #     description: get airport data sorted in order of their name in asc or desc order
  #     parameters: 
  #      - name: Order
  #        in: query
  #        description: Asc/Desc
  #        required: true
  #        type: string
  #     responses: 
  #       '200':
  #         description: A JSON array of sorted Airport data
  #         content:
  #           application/json:
  #             schema: 
  #               type: array
  #               items: 
  #                 type: string  
  # /airport/sort/fuelcapacity:
  #   get:
  #     tags:
  #      - Sort Airport API
  #     summary: get airport data sorted in order of their fuelcapacity
  #     description: get airport data sorted in order of their fuelcapacity in asc or desc order
  #     parameters: 
  #      - name: Order
  #        in: query
  #        description: Asc/Desc
  #        required: true
  #        type: string
  #     responses: 
  #       '200':
  #         description: A JSON array of sorted Airport data
  #             content:
  #               application/json:
  #                 schema: 
  #                   type: array
  #                   items: 
  #                     type: string  
  # /airport/sort/fuelavailable:
  #   get:
  #     tags:
  #      - Sort Airport API
  #     summary: get airport data sorted in order of their fuelavailable
  #     description: get airport data sorted in order of their fuelavailable in asc or desc order
  #     parameters: 
  #      - name: Order
  #        in: query
  #        description: Asc/Desc
  #        required: true
  #        type: string
  #     responses: 
  #       '200':
  #         description: A JSON array of sorted Airport data
  #             content:
  #               application/json:
  #                 schema: 
  #                   type: array
  #                   items: 
  #                     type: string  
  # /airport/sort/recent:
  #   get:
  #     tags:
  #      - Sort Airport API
  #     summary: get airport data sorted in order of their time
  #     description: get airport data sorted in order of their time in asc or desc order
  #     parameters: 
  #      - name: Order
  #        in: query
  #        description: Asc/Desc
  #        required: true
  #        type: string
  #     responses: 
  #       '200':
  #         description: A JSON array of sorted Airport data
  #             content:
  #               application/json:
  #                 schema: 
  #                   type: array
  #                   items: 
  #                     type: string 
  # /airport/sort/older:
  #   get:
  #     tags:
  #      - Sort Airport API
  #     summary: get airport data sorted in order of their time
  #     description: get airport data sorted in order of their time in asc or desc order
  #     parameters: 
  #      - name: Order
  #        in: query
  #        description: Asc/Desc
  #        required: true
  #        type: string
  #     responses: 
  #       '200':
  #         description: A JSON array of sorted Airport data
  #             content:
  #               application/json:
  #                 schema: 
  #                   type: array
  #                   items: 
  #                     type: string 
  # /airport/sort/older:
  #   get:
  #     tags:
  #      - Sort Airport API
  #     summary: get airport data sorted in order of their time
  #     description: get airport data sorted in order of their time in asc or desc order
  #     parameters: 
  #      - name: Order
  #        in: query
  #        description: Asc/Desc
  #        required: true
  #        type: string
  #     responses: 
  #       '200':
  #         description: A JSON array of sorted Airport data
  #             content:
  #               application/json:
  #                 schema: 
  #                   type: array
  #                   items: 
  #                     type: string 
  # /aircraft/sort/aircraft_no:
  #   get:
  #     tags:
  #      - Sort Aircraft API
  #     summary: get aircraft data sorted in order of aircraft number
  #     description: get aircraft data sorted in order of aircraft number in asc or desc order
  #     parameters: 
  #      - name: Order
  #        in: query
  #        description: Asc/Desc
  #        required: true
  #        type: string
  #     responses: 
  #       '200':
  #         description: A JSON array of sorted Aircraft data
  #             content:
  #               application/json:
  #                 schema: 
  #                   type: array
  #                   items: 
  #                     type: string 
  # /aircraft/sort/airline:
  #   get:
  #     tags:
  #      - Sort Aircraft API
  #     summary: get aircraft data sorted in order of airline
  #     description: get airport data sorted in order of airline in asc or desc order
  #     parameters: 
  #      - name: Order
  #        in: query
  #        description: Asc/Desc
  #        required: true
  #        type: string
  #     responses: 
  #       '200':
  #           description: A JSON array of sorted Aircraft data
  #               content:
  #                 application/json:
  #                   schema: 
  #                     type: array
  #                     items: 
  #                       type: string 
  # /aircraft/sort/older:
  #   get:
  #     tags:
  #      - Sort Aircraft API
  #     summary: get aircraft data sorted in order of their time
  #     description: get aircraft data sorted in order of their time in asc or desc order
  #     parameters: 
  #      - name: Order
  #        in: query
  #        description: Asc/Desc
  #        required: true
  #        type: string
  #     responses: 
  #       '200':
  #         description: A JSON array of sorted Aircraft data
  #             content:
  #               application/json:
  #                 schema: 
  #                   type: array
  #                   items: 
  #                     type: string 
  # /aircraft/sort/older:
  #   get:
  #     tags:
  #      - Sort Aircraft API
  #     summary: get aircraft data sorted in order of their time
  #     description: get aircraft data sorted in order of their time in asc or desc order
  #     parameters: 
  #      - name: Order
  #        in: query
  #        description: Asc/Desc
  #        required: true
  #        type: string
  #     responses: 
  #       '200':
  #           description: A JSON array of sorted Aircraft data
  #               content:
  #                 application/json:
  #                   schema: 
  #                     type: array
  #                     items: 
  #                       type: string
                  
  # /transaction/sort/date:
  #   get:
  #     tags:
  #      - Sort Transaction API
  #     summary: get transaction data sorted in order of their time
  #     description: get trasaction data sorted in order of their time in desc order
  #     parameters: 
  #      - name: Order
  #        in: query
  #        description: Asc/Desc
  #        required: true
  #        type: string
  #     responses: 
  #       '200':
  #           description: A JSON array of sorted Transaction data
  #               content:
  #                 application/json:
  #                   schema: 
  #                     type: array
  #                     items: 
  #                       type: string
  # /transaction/sort/quantity:
  #   get:
  #     tags:
  #      - Sort Transaction API
  #     summary: get transaction data sorted in order of their quantity
  #     description: get transaction data sorted in order of their quantity in asc or desc order
  #     parameters: 
  #      - name: Order
  #        in: query
  #        description: Asc/Desc
  #        required: true
  #        type: string
  #     responses: 
  #       '200':
  #           description: A JSON array of sorted Transaction data
  #               content:
  #                 application/json:
  #                   schema: 
  #                     type: array
  #                     items: 
  #                       type: string
  # /transaction/sort/older:
  #   get:
  #     tags:
  #      - Sort Transaction API
  #     summary: get transaction data sorted in order of their time
  #     description: get transaction data sorted in order of their time in asc or desc order
  #     parameters: 
  #      - name: Order
  #        in: path
  #        description: Asc/Desc
  #        required: true
  #        type: string
  #     responses: 
  #       '200':
  #           description: A JSON array of sorted Transaction data
  #               content:
  #                 application/json:
  #                   schema: 
  #                     type: array
  #                     items: 
  #                       type: string
  # /aircraft/sort/older:
  #   get:
  #     tags:
  #      - Sort API
  #     summary: get aircraft data sorted in order of their time
  #     description: get aircraft data sorted in order of their time in asc or desc order
  #     parameters: 
  #      - name: Order
  #        in: query
  #        description: Asc/Desc
  #        required: true
  #        type: string
  #     responses: 
  #       '200':
  #           description: A JSON array of sorted Aircraft data
  #               content:
  #                 application/json:
  #                   schema: 
  #                     type: array
  #                     items: 
  #                       type: string
